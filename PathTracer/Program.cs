using System;

namespace PathTracer {
    class Program {
        static void Main(string[] args) {
            Console.WriteLine("Hello World!");
            byte[] testData = new byte[] { 255, 0, 0, 255, 0, 0, 255, 0, 0, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127,
             255, 0, 0, 255, 0, 0, 255, 0, 0, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127,
             127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127,
             127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127,
             255, 0, 0, 255, 0, 0, 255, 0, 0, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127,
             255, 0, 0, 255, 0, 0, 255, 0, 0, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127,
             255, 0, 0, 255, 0, 0, 255, 0, 0, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127,
             255, 0, 0, 255, 0, 0, 255, 0, 0, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127,
             255, 0, 0, 255, 0, 0, 255, 0, 0, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127
             };
            Output.createBMP(testData, 16, 9, "test.bmp");
            return;

            
            ////  int w = 960, h = 540, samplesCount = 16;
            //int w = 240, h = 135, samplesCount = 8;
            //Vec position(-22, 5, 25);
            //Vec goal = !(Vec(-3, 4, 0) + position * -1);
            //Vec left = !Vec(goal.z, 0, -goal.x) * (1. / w);

            //// Cross-product to get the up vector
            //Vec up(goal.y* left.z -goal.z * left.y,
            //      goal.z* left.x - goal.x * left.z,
            //      goal.x* left.y - goal.y * left.x);

            ////printf("P6 %d %d 255 ", w, h);
            //byte* pixels = new byte[3 * w * h];
            //for (int y = h; y > 0; --y) {
            //    for (int x = w; x > 0; --x) {
            //        Vec color;
            //        for (int p = samplesCount; p--;) {
            //            color = color + Trace(position, !(goal + left * (x - w / 2 + randomVal()) + up * (y - h / 2 + randomVal())));
            //        }

            //        // Reinhard tone mapping
            //        color = color * (1. / samplesCount) + 14. / 241;
            //        Vec o = color + 1;
            //        color = Vec(color.x / o.x, color.y / o.y, color.z / o.z) * 255;
            //        int index = 3 * (w * y - w + x - 1);
            //        pixels[index] = (byte)color.x;
            //        pixels[index + 1] = (byte)color.y;
            //        pixels[index + 2] = (byte)color.z;
            //        //if (x < w/2 && y < h/2) printf("%d %d \n", x, y);
            //        //printf("%c%c%c", (int) color.x, (int) color.y, (int) color.z);
            //    }
            //}
            //createBMP(pixels, w, h, "cardCPP.bmp");
            
        }
    }
}
